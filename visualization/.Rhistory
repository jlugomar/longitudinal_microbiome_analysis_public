CreateStyle.R
library(scales)
library(scales)
library(stringr)
options("scipen"=100, "digits"=4)
setwd("Documents/GitHub/longitudinal_microbiome_analysis_public/visualization/")
/Users/elyonyi/
/Users/elyonyi/
setwd("Users/elyonyi/Documents/GitHub/longitudinal_microbiome_analysis_public/visualization/")
setwd("/Users/elyonyi/Documents/GitHub/longitudinal_microbiome_analysis_public/visualization/")
nameOfNetwork = "infant_gut_microbiota_dbn_sample_alignment_filtered_sr3d_dbnIntraBoot_noPeriodOfStudy.graphml"#list.files(pattern =".*\\.graphml")
abundances = unlist(read.csv('meanAbundanceInfantFilteredAlignment.txt',sep="\t"))
#New infant gut
names = c("Day of life sample obtained","Gestational age at birth","Postconceptional age sample obtained",
"Gender","Mode of birth","Room type","Human milk used",
"Days of antibiotics","Actinobacteria","Alphaproteobacteria","Bacilli","Bacteroidia",
"Betaproteobacteria","Clostridia","Cyanobacteria","Epsilonproteobacteria","Erysipelotrichi","Flavobacteria",
"Fusobacteria","Gammaproteobacteria","Holophagae","Unclassified")
##non-taxa for infant
attr = c("Subject","Day of life sample obtained","Gestational age at birth","Postconceptional age sample obtained","Gender",
"Mode of birth","Room type","Human milk used","Days of antibiotics")
f = readChar("styleBase.xml", file.info("styleBase.xml")$size)
split = strsplit(f, "<dependency name=\"nodeSizeLocked\" value=\"true\"/>", fixed = T)
before = unlist(split)[1]
after = unlist(split)[2]
################## NODE COLOR
aux ="\n            <visualProperty name=\"NODE_FILL_COLOR\" default=\"#ff9232\">\n                <discreteMapping attributeType=\"string\" attributeName=\"name\">"
for (i in 1:length(names)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"#4d93a8\" attributeValue=\"",names[i],"_ti+1","\"/>",sep="")
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
f = paste(before,"<dependency name=\"nodeSizeLocked\" value=\"true\"/>",aux,after,sep= "")
############### SIZE
network = readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
network= unlist(strsplit(x =network, "\r\n"))
network= unlist(strsplit(x =network, "\n"))
maxAcum = 1
for (i in 1:length(names))
maxAcum = max(maxAcum, length(grep(pattern = paste(".*target=\"",names[i],"_ti+1","\".*",sep=""), x = network, ignore.case = T)))
aux =paste(aux,"\n            <visualProperty name=\"NODE_SIZE\" default=\"40\">\n                <discreteMapping attributeType=\"string\" attributeName=\"name\">",sep="")
for (i in 1:length(names)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"",(20*length(grep(pattern = paste(".*target=\"",names[i],"_ti","\".*",sep=""), x = network, ignore.case = T))/maxAcum+40),"\" attributeValue=\"",names[i],"_ti","\"/>",sep="")
aux = paste(aux,"\n                    <discreteMappingEntry value=\"",(20*length(grep(pattern = paste(".*target=\"",names[i],"_ti\\+1","\".*",sep=""), x = network, ignore.case = T))/maxAcum+40),"\" attributeValue=\"",names[i],"_ti+1","\"/>",sep="")
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
f = paste(before,"<dependency name=\"nodeSizeLocked\" value=\"true\"/>",aux,after,sep= "")
############### TRANSPARENCY
abundancesScaled = rescale(abundances,c(90,255))
abundancesScaled = c(rep(200,length(attr)),abundancesScaled)
aux =paste(aux,"\n            <visualProperty name=\"NODE_TRANSPARENCY\" default=\"255\">\n                <discreteMapping attributeType=\"string\" attributeName=\"name\">",sep="")
for (i in 1:length(names)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"",round(abundancesScaled[i],1),"\" attributeValue=\"",names[i],"_ti","\"/>",sep="")
aux = paste(aux,"\n                    <discreteMappingEntry value=\"",round(abundancesScaled[i],1),"\" attributeValue=\"",names[i],"_ti+1","\"/>",sep="")
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
f = paste(before,"<dependency name=\"nodeSizeLocked\" value=\"true\"/>",aux,after,sep= "")
############### SHAPE
aux =paste(aux,"\n            <visualProperty name=\"NODE_SHAPE\" default=\"ELLIPSE\">\n                <discreteMapping attributeType=\"string\" attributeName=\"name\">",sep="")
for (i in 1:length(attr)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"DIAMOND\" attributeValue=\"", paste(attr[i],"_ti",sep=""),"\"/>",sep="")
aux = paste(aux,"\n                    <discreteMappingEntry value=\"DIAMOND\" attributeValue=\"", paste(attr[i],"_ti+1",sep=""),"\"/>",sep="")
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
f = paste(before,"<dependency name=\"nodeSizeLocked\" value=\"true\"/>",aux,after,sep= "")
split = strsplit(f, "<dependency name=\"arrowColorMatchesEdge\" value=\"false\"/>", fixed = T)
before = unlist(split)[1]
after = unlist(split)[2]
################## EDGE LINE TYPE
aux = "\n            <visualProperty name=\"EDGE_LINE_TYPE\" default=\"SOLID\">\n                <discreteMapping attributeType=\"string\" attributeName=\"shared name\">"
for (i in 1:length(names)){
for (j in 1:length(names)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"EQUAL_DASH\" attributeValue=\"",names[i],"_ti+1 (-) ", names[j],"_ti+1","\"/>",sep="")
aux = paste(aux,"\n                    <discreteMappingEntry value=\"EQUAL_DASH\" attributeValue=\"",names[i],"_ti (-) ", names[j],"_ti","\"/>",sep="")
}
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
################ Now transparency is based on the boot score
aux =paste(aux,"\n            <visualProperty name=\"EDGE_TRANSPARENCY\" default=\"255\">\n                <discreteMapping attributeType=\"string\" attributeName=\"name\">",sep="")
for (i in 1:length(names)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"70\" attributeValue=\"",names[i],"_ti (-) ", names[i],"_ti+1","\"/>",sep="")
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
################## EDGE TRANSPARENCY
weights = str_extract(network[grep("key=\"key_bootScore",network)], "\\-*\\d+\\.+\\d+")
weights = weights[!is.na(weights)]
maxAbsWeight =  max(abs(as.numeric(weights)))
minAbsWeight =  min(abs(as.numeric(weights)))
######## For edge coefficient
aux =paste(aux,"\n<visualProperty name=\"EDGE_TRANSPARENCY\" default=\"2.0\">\n")
aux =paste(aux,"  <continuousMapping attributeType=\"float\" attributeName=\"bootScore\">\n")
aux =paste(aux,"  <continuousMappingPoint lesserValue=\"130.0\" greaterValue=\"130.0\" equalValue=\"130.0\" attrValue=\"",minAbsWeight,"\"/>\n",sep="")
aux =paste(aux,"  <continuousMappingPoint lesserValue=\"130.0\" greaterValue=\"255.0\" equalValue=\"255.0\" attrValue=\"",maxAbsWeight,"\"/>\n",sep="")
aux =paste(aux,"  </continuousMapping>\n")
aux =paste(aux,"  </visualProperty>\n")
################## EDGE WIDTH
weights = str_extract(network[grep("key=\"key_weight",network)], "\\-*\\d+\\.+\\d+")
weights = weights[!is.na(weights)]
maxAbsWeight =  max(abs(as.numeric(weights)))
medianAbsWeight =  median(abs(as.numeric(weights)))
######## For edge coefficient normalized
aux =paste(aux,"\n<visualProperty name=\"EDGE_WIDTH\" default=\"2.0\">\n")
aux =paste(aux,"  <continuousMapping attributeType=\"float\" attributeName=\"weight\">\n")
aux =paste(aux,"  <continuousMappingPoint lesserValue=\"15.0\" greaterValue=\"15.0\" equalValue=\"15.0\" attrValue=\"-",1,"\"/>\n",sep="")
aux =paste(aux,"  <continuousMappingPoint lesserValue=\"1.0\" greaterValue=\"1.0\" equalValue=\"1.0\" attrValue=\"0.0\"/>\n")
aux =paste(aux,"  <continuousMappingPoint lesserValue=\"15.0\" greaterValue=\"15.0\" equalValue=\"15.0\" attrValue=\"",1,"\"/>\n",sep="")
aux =paste(aux,"  </continuousMapping>\n")
aux =paste(aux,"  </visualProperty>\n")
fileConn<-file("style.xml")
writeLines(paste(before,"<dependency name=\"arrowColorMatchesEdge\" value=\"false\"/>",aux,after,sep=""), fileConn)
for (f in files){
nameOfNetwork = paste(folder,f,sep="/")
abundances = unlist(read.csv('meanAbundanceInfantFilteredAlignment',sep="\t"))
networkO = readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
network= unlist(strsplit(x =networkO, "\r\n"))
network= unlist(strsplit(x =network, "\n"))
################## EDGE WIDTH
weights = str_extract(network[grep("key=\"key_weight",network)], "\\-*\\d+\\.+\\d+")
weights = weights[!is.na(weights)]
########### WE NORMALIZE THE WEIGHTS BASED ON w_i \average{x_i} / \sum_j  abs(w_j) \average{x_j}
library(igraph)
edgeList = igraph::get.edgelist(igraph::read.graph(nameOfNetwork, format = "graphml"))
edgeAttr = igraph::get.edge.attribute(igraph::read.graph(nameOfNetwork, format = "graphml"))
nodeAttr = igraph::get.vertex.attribute(igraph::read.graph(nameOfNetwork, format = "graphml"))
#This function returns the abundance of a node based on the index of the incoming node
abundanceOfTaxa <- function(nameOfIncomingNode,abundances){
# we look for the abundance of that parent node
abundance = abundances[which(names(abundances) %in% substr(nameOfIncomingNode,1,nchar(nameOfIncomingNode)-3))]
if (length(abundance)==0){
#the node doesn't have abundance, it is clinical. We make it to be an average of the other abundances
abundance = mean(abundances)
}
return (abundance)
}
normalizedWeights =c()
#Iterate over all posible children. to normalize incoming edges to each of them
for (i in 1:length(nodeAttr[[1]])){
indexOfIncomingEdges = which(edgeList[,2]==i)
indexOfOutgoingEdges = edgeList[indexOfIncomingEdges,1]
#We need to calculate the sum of the multiplication of each weight times the mean abundance for all incoming edges of this children
sum = 0
for (j in 1:length(indexOfIncomingEdges)){
nameOfIncomingNode = nodeAttr$id[indexOfOutgoingEdges[j]]
abundance = abundanceOfTaxa(nameOfIncomingNode,abundances)
sum = sum + abs(edgeAttr$weight[indexOfIncomingEdges[j]]*abundance)
}
#Iterate over all incoming edges for this children
for (j in 1:length(indexOfIncomingEdges)){
nameOfIncomingNode = nodeAttr$id[indexOfOutgoingEdges[j]]
abundance = abundanceOfTaxa(nameOfIncomingNode,abundances)
normalizedWeights = as.vector(c(normalizedWeights,edgeAttr$weight[indexOfIncomingEdges[j]]*abundance/sum))
}
}
#we update the weights in the file
for(i in 1:length(weights)){
networkO = gsub(weights[i], normalizedWeights[i], networkO)
}
#save it and take care of the null character that appears
writeChar(networkO,nameOfNetwork,nchars = nchar(networkO))
r = readBin(nameOfNetwork, raw(), file.info(nameOfNetwork)$size)
r[r==as.raw(0)] = as.raw(0x20) ## replace with 0x20 = <space>
writeBin(r, nameOfNetwork)
# if (f %in% "infant_gut_microbiota_dbn_sample_alignment_filtered_sr3d_dbnIntraBoot.graphml")
#   break
}
library(stringr)
library(igraph)
options("scipen"=100, "digits"=4)
folder="/Users/elyonyi/Documents/GitHub/longitudinal_microbiome_analysis_public/visualization/"
setwd(folder)
files = list.files(path = folder, pattern = ".graphml")
for (f in files){
nameOfNetwork = paste(folder,f,sep="/")
abundances = unlist(read.csv('meanAbundanceInfantFilteredAlignment',sep="\t"))
networkO = readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
network= unlist(strsplit(x =networkO, "\r\n"))
network= unlist(strsplit(x =network, "\n"))
################## EDGE WIDTH
weights = str_extract(network[grep("key=\"key_weight",network)], "\\-*\\d+\\.+\\d+")
weights = weights[!is.na(weights)]
########### WE NORMALIZE THE WEIGHTS BASED ON w_i \average{x_i} / \sum_j  abs(w_j) \average{x_j}
library(igraph)
edgeList = igraph::get.edgelist(igraph::read.graph(nameOfNetwork, format = "graphml"))
edgeAttr = igraph::get.edge.attribute(igraph::read.graph(nameOfNetwork, format = "graphml"))
nodeAttr = igraph::get.vertex.attribute(igraph::read.graph(nameOfNetwork, format = "graphml"))
#This function returns the abundance of a node based on the index of the incoming node
abundanceOfTaxa <- function(nameOfIncomingNode,abundances){
# we look for the abundance of that parent node
abundance = abundances[which(names(abundances) %in% substr(nameOfIncomingNode,1,nchar(nameOfIncomingNode)-3))]
if (length(abundance)==0){
#the node doesn't have abundance, it is clinical. We make it to be an average of the other abundances
abundance = mean(abundances)
}
return (abundance)
}
normalizedWeights =c()
#Iterate over all posible children. to normalize incoming edges to each of them
for (i in 1:length(nodeAttr[[1]])){
indexOfIncomingEdges = which(edgeList[,2]==i)
indexOfOutgoingEdges = edgeList[indexOfIncomingEdges,1]
#We need to calculate the sum of the multiplication of each weight times the mean abundance for all incoming edges of this children
sum = 0
for (j in 1:length(indexOfIncomingEdges)){
nameOfIncomingNode = nodeAttr$id[indexOfOutgoingEdges[j]]
abundance = abundanceOfTaxa(nameOfIncomingNode,abundances)
sum = sum + abs(edgeAttr$weight[indexOfIncomingEdges[j]]*abundance)
}
#Iterate over all incoming edges for this children
for (j in 1:length(indexOfIncomingEdges)){
nameOfIncomingNode = nodeAttr$id[indexOfOutgoingEdges[j]]
abundance = abundanceOfTaxa(nameOfIncomingNode,abundances)
normalizedWeights = as.vector(c(normalizedWeights,edgeAttr$weight[indexOfIncomingEdges[j]]*abundance/sum))
}
}
#we update the weights in the file
for(i in 1:length(weights)){
networkO = gsub(weights[i], normalizedWeights[i], networkO)
}
#save it and take care of the null character that appears
writeChar(networkO,nameOfNetwork,nchars = nchar(networkO))
r = readBin(nameOfNetwork, raw(), file.info(nameOfNetwork)$size)
r[r==as.raw(0)] = as.raw(0x20) ## replace with 0x20 = <space>
writeBin(r, nameOfNetwork)
# if (f %in% "infant_gut_microbiota_dbn_sample_alignment_filtered_sr3d_dbnIntraBoot.graphml")
#   break
}
library(stringr)
library(igraph)
options("scipen"=100, "digits"=4)
folder="/Users/elyonyi/Documents/GitHub/longitudinal_microbiome_analysis_public/visualization/"
setwd(folder)
files = list.files(path = folder, pattern = ".graphml")
for (f in files){
nameOfNetwork = paste(folder,f,sep="/")
abundances = unlist(read.csv('meanAbundanceInfantFilteredAlignment.txt',sep="\t"))
networkO = readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
network= unlist(strsplit(x =networkO, "\r\n"))
network= unlist(strsplit(x =network, "\n"))
################## EDGE WIDTH
weights = str_extract(network[grep("key=\"key_weight",network)], "\\-*\\d+\\.+\\d+")
weights = weights[!is.na(weights)]
########### WE NORMALIZE THE WEIGHTS BASED ON w_i \average{x_i} / \sum_j  abs(w_j) \average{x_j}
library(igraph)
edgeList = igraph::get.edgelist(igraph::read.graph(nameOfNetwork, format = "graphml"))
edgeAttr = igraph::get.edge.attribute(igraph::read.graph(nameOfNetwork, format = "graphml"))
nodeAttr = igraph::get.vertex.attribute(igraph::read.graph(nameOfNetwork, format = "graphml"))
#This function returns the abundance of a node based on the index of the incoming node
abundanceOfTaxa <- function(nameOfIncomingNode,abundances){
# we look for the abundance of that parent node
abundance = abundances[which(names(abundances) %in% substr(nameOfIncomingNode,1,nchar(nameOfIncomingNode)-3))]
if (length(abundance)==0){
#the node doesn't have abundance, it is clinical. We make it to be an average of the other abundances
abundance = mean(abundances)
}
return (abundance)
}
normalizedWeights =c()
#Iterate over all posible children. to normalize incoming edges to each of them
for (i in 1:length(nodeAttr[[1]])){
indexOfIncomingEdges = which(edgeList[,2]==i)
indexOfOutgoingEdges = edgeList[indexOfIncomingEdges,1]
#We need to calculate the sum of the multiplication of each weight times the mean abundance for all incoming edges of this children
sum = 0
for (j in 1:length(indexOfIncomingEdges)){
nameOfIncomingNode = nodeAttr$id[indexOfOutgoingEdges[j]]
abundance = abundanceOfTaxa(nameOfIncomingNode,abundances)
sum = sum + abs(edgeAttr$weight[indexOfIncomingEdges[j]]*abundance)
}
#Iterate over all incoming edges for this children
for (j in 1:length(indexOfIncomingEdges)){
nameOfIncomingNode = nodeAttr$id[indexOfOutgoingEdges[j]]
abundance = abundanceOfTaxa(nameOfIncomingNode,abundances)
normalizedWeights = as.vector(c(normalizedWeights,edgeAttr$weight[indexOfIncomingEdges[j]]*abundance/sum))
}
}
#we update the weights in the file
for(i in 1:length(weights)){
networkO = gsub(weights[i], normalizedWeights[i], networkO)
}
#save it and take care of the null character that appears
writeChar(networkO,nameOfNetwork,nchars = nchar(networkO))
r = readBin(nameOfNetwork, raw(), file.info(nameOfNetwork)$size)
r[r==as.raw(0)] = as.raw(0x20) ## replace with 0x20 = <space>
writeBin(r, nameOfNetwork)
# if (f %in% "infant_gut_microbiota_dbn_sample_alignment_filtered_sr3d_dbnIntraBoot.graphml")
#   break
}
library(scales)
library(stringr)
options("scipen"=100, "digits"=4)
setwd("/Users/elyonyi/Documents/GitHub/longitudinal_microbiome_analysis_public/visualization/")
nameOfNetwork = "infant_gut_microbiota_dbn_sample_alignment_filtered_sr3d_dbnIntraBoot_noPeriodOfStudy.graphml"#list.files(pattern =".*\\.graphml")
abundances = unlist(read.csv('meanAbundanceInfantFilteredAlignment.txt',sep="\t"))
#New infant gut
names = c("Day of life sample obtained","Gestational age at birth","Postconceptional age sample obtained",
"Gender","Mode of birth","Room type","Human milk used",
"Days of antibiotics","Actinobacteria","Alphaproteobacteria","Bacilli","Bacteroidia",
"Betaproteobacteria","Clostridia","Cyanobacteria","Epsilonproteobacteria","Erysipelotrichi","Flavobacteria",
"Fusobacteria","Gammaproteobacteria","Holophagae","Unclassified")
##non-taxa for infant
attr = c("Subject","Day of life sample obtained","Gestational age at birth","Postconceptional age sample obtained","Gender",
"Mode of birth","Room type","Human milk used","Days of antibiotics")
f = readChar("styleBase.xml", file.info("styleBase.xml")$size)
split = strsplit(f, "<dependency name=\"nodeSizeLocked\" value=\"true\"/>", fixed = T)
before = unlist(split)[1]
after = unlist(split)[2]
################## NODE COLOR
aux ="\n            <visualProperty name=\"NODE_FILL_COLOR\" default=\"#ff9232\">\n                <discreteMapping attributeType=\"string\" attributeName=\"name\">"
for (i in 1:length(names)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"#4d93a8\" attributeValue=\"",names[i],"_ti+1","\"/>",sep="")
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
f = paste(before,"<dependency name=\"nodeSizeLocked\" value=\"true\"/>",aux,after,sep= "")
############### SIZE
network = readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
network= unlist(strsplit(x =network, "\r\n"))
network= unlist(strsplit(x =network, "\n"))
maxAcum = 1
for (i in 1:length(names))
maxAcum = max(maxAcum, length(grep(pattern = paste(".*target=\"",names[i],"_ti+1","\".*",sep=""), x = network, ignore.case = T)))
aux =paste(aux,"\n            <visualProperty name=\"NODE_SIZE\" default=\"40\">\n                <discreteMapping attributeType=\"string\" attributeName=\"name\">",sep="")
for (i in 1:length(names)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"",(20*length(grep(pattern = paste(".*target=\"",names[i],"_ti","\".*",sep=""), x = network, ignore.case = T))/maxAcum+40),"\" attributeValue=\"",names[i],"_ti","\"/>",sep="")
aux = paste(aux,"\n                    <discreteMappingEntry value=\"",(20*length(grep(pattern = paste(".*target=\"",names[i],"_ti\\+1","\".*",sep=""), x = network, ignore.case = T))/maxAcum+40),"\" attributeValue=\"",names[i],"_ti+1","\"/>",sep="")
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
f = paste(before,"<dependency name=\"nodeSizeLocked\" value=\"true\"/>",aux,after,sep= "")
############### TRANSPARENCY
abundancesScaled = rescale(abundances,c(90,255))
abundancesScaled = c(rep(200,length(attr)),abundancesScaled)
aux =paste(aux,"\n            <visualProperty name=\"NODE_TRANSPARENCY\" default=\"255\">\n                <discreteMapping attributeType=\"string\" attributeName=\"name\">",sep="")
for (i in 1:length(names)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"",round(abundancesScaled[i],1),"\" attributeValue=\"",names[i],"_ti","\"/>",sep="")
aux = paste(aux,"\n                    <discreteMappingEntry value=\"",round(abundancesScaled[i],1),"\" attributeValue=\"",names[i],"_ti+1","\"/>",sep="")
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
f = paste(before,"<dependency name=\"nodeSizeLocked\" value=\"true\"/>",aux,after,sep= "")
############### SHAPE
aux =paste(aux,"\n            <visualProperty name=\"NODE_SHAPE\" default=\"ELLIPSE\">\n                <discreteMapping attributeType=\"string\" attributeName=\"name\">",sep="")
for (i in 1:length(attr)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"DIAMOND\" attributeValue=\"", paste(attr[i],"_ti",sep=""),"\"/>",sep="")
aux = paste(aux,"\n                    <discreteMappingEntry value=\"DIAMOND\" attributeValue=\"", paste(attr[i],"_ti+1",sep=""),"\"/>",sep="")
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
f = paste(before,"<dependency name=\"nodeSizeLocked\" value=\"true\"/>",aux,after,sep= "")
split = strsplit(f, "<dependency name=\"arrowColorMatchesEdge\" value=\"false\"/>", fixed = T)
before = unlist(split)[1]
after = unlist(split)[2]
################## EDGE LINE TYPE
aux = "\n            <visualProperty name=\"EDGE_LINE_TYPE\" default=\"SOLID\">\n                <discreteMapping attributeType=\"string\" attributeName=\"shared name\">"
for (i in 1:length(names)){
for (j in 1:length(names)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"EQUAL_DASH\" attributeValue=\"",names[i],"_ti+1 (-) ", names[j],"_ti+1","\"/>",sep="")
aux = paste(aux,"\n                    <discreteMappingEntry value=\"EQUAL_DASH\" attributeValue=\"",names[i],"_ti (-) ", names[j],"_ti","\"/>",sep="")
}
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
################ Now transparency is based on the boot score
aux =paste(aux,"\n            <visualProperty name=\"EDGE_TRANSPARENCY\" default=\"255\">\n                <discreteMapping attributeType=\"string\" attributeName=\"name\">",sep="")
for (i in 1:length(names)){
aux = paste(aux,"\n                    <discreteMappingEntry value=\"70\" attributeValue=\"",names[i],"_ti (-) ", names[i],"_ti+1","\"/>",sep="")
}
aux = paste(aux,"\n                </discreteMapping>\n            </visualProperty>" ,sep="")
################## EDGE TRANSPARENCY
weights = str_extract(network[grep("key=\"key_bootScore",network)], "\\-*\\d+\\.+\\d+")
weights = weights[!is.na(weights)]
maxAbsWeight =  max(abs(as.numeric(weights)))
minAbsWeight =  min(abs(as.numeric(weights)))
######## For edge coefficient
aux =paste(aux,"\n<visualProperty name=\"EDGE_TRANSPARENCY\" default=\"2.0\">\n")
aux =paste(aux,"  <continuousMapping attributeType=\"float\" attributeName=\"bootScore\">\n")
aux =paste(aux,"  <continuousMappingPoint lesserValue=\"130.0\" greaterValue=\"130.0\" equalValue=\"130.0\" attrValue=\"",minAbsWeight,"\"/>\n",sep="")
aux =paste(aux,"  <continuousMappingPoint lesserValue=\"130.0\" greaterValue=\"255.0\" equalValue=\"255.0\" attrValue=\"",maxAbsWeight,"\"/>\n",sep="")
aux =paste(aux,"  </continuousMapping>\n")
aux =paste(aux,"  </visualProperty>\n")
################## EDGE WIDTH
weights = str_extract(network[grep("key=\"key_weight",network)], "\\-*\\d+\\.+\\d+")
weights = weights[!is.na(weights)]
maxAbsWeight =  max(abs(as.numeric(weights)))
medianAbsWeight =  median(abs(as.numeric(weights)))
######## For edge coefficient normalized
aux =paste(aux,"\n<visualProperty name=\"EDGE_WIDTH\" default=\"2.0\">\n")
aux =paste(aux,"  <continuousMapping attributeType=\"float\" attributeName=\"weight\">\n")
aux =paste(aux,"  <continuousMappingPoint lesserValue=\"15.0\" greaterValue=\"15.0\" equalValue=\"15.0\" attrValue=\"-",1,"\"/>\n",sep="")
aux =paste(aux,"  <continuousMappingPoint lesserValue=\"1.0\" greaterValue=\"1.0\" equalValue=\"1.0\" attrValue=\"0.0\"/>\n")
aux =paste(aux,"  <continuousMappingPoint lesserValue=\"15.0\" greaterValue=\"15.0\" equalValue=\"15.0\" attrValue=\"",1,"\"/>\n",sep="")
aux =paste(aux,"  </continuousMapping>\n")
aux =paste(aux,"  </visualProperty>\n")
fileConn<-file("style.xml")
writeLines(paste(before,"<dependency name=\"arrowColorMatchesEdge\" value=\"false\"/>",aux,after,sep=""), fileConn)
close(fileConn)
